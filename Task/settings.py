"""
Django settings for Task project.

Generated by 'django-admin startproject' using Django 4.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
from pathlib import Path
import os
# 외부 API 키들
LANGSMITH_API_KEY = os.getenv('LANGSMITH_API_KEY')
MOVIEDATA_API_KEY = os.getenv('MOVIEDATA_API_KEY')
MOVIEDATA_TOKEN = os.getenv('MOVIEDATA_TOKEN')
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
The_Film_Council_API_KEY = os.getenv('The_Film_Council_API_KEY')


import os

MOVIEDATA_TOKEN = os.getenv("MOVIEDATA_TOKEN", "")
THE_FILM_COUNCIL_API_KEY = os.getenv("THE_FILM_COUNCIL_API_KEY", "")
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-xh(#7$$8(e4e$64$70*^zvvw$z)hdab=0%52lc+)8@$mm%8*$l'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["localhost", "127.0.0.1", ".cloudtype.app", "0.0.0.0"]
CSRF_TRUSTED_ORIGINS = ['https://*.cloudtype.app']

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    'django_extensions',
 

    # DRF
    'rest_framework',
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',
    
    # my apps
    'accounts',
    'articles',
    'Main',
    'AI'
]
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'Task.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],  # 프로젝트의 템플릿 디렉토리
        'APP_DIRS': True,  # 앱 내부의 templates 폴더를 자동 탐지
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
] 

WSGI_APPLICATION = "Task.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases


DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
 
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [
    BASE_DIR / "static",  # 정적 파일 디렉토리 지정
]

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# User 모델 설정
AUTH_USER_MODEL = 'accounts.User'

# JWT 인증
REST_FRAMEWORK = {
    # 모든 API에 인증을 필수로 하는 전역 설정
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',  
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',  # JWT 인증
        'rest_framework.authentication.SessionAuthentication',        # 세션 인증
    ),
}

# JWT 설정
from datetime import timedelta
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=30),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'BLACKLIST_AFTER_ROTATION': True,  # 토큰 회전 후 블랙리스트에 추가

    'AUTH_COOKIE': 'access_token',                # 쿠키 이름
    'AUTH_COOKIE_DOMAIN': None,                   # 쿠키가 유효한 도메인 (기본값: None)
    'AUTH_COOKIE_SECURE': False,                  # HTTPS만 허용 (개발 환경: False)
    'AUTH_COOKIE_HTTP_ONLY': True,                # JavaScript에서 쿠키 접근 방지
    'AUTH_COOKIE_PATH': '/',                      # 쿠키 경로
    'AUTH_COOKIE_SAMESITE': 'Lax',                # SameSite 설정 ('Strict', 'Lax', 'None')

    # 리프레시 토큰 회전 설정
    'ROTATE_REFRESH_TOKENS': True,                # 리프레시 시 새로운 리프레시 토큰 발급
    'BLACKLIST_AFTER_ROTATION': True,             # 기존 리프레시 토큰 블랙리스트 추가

    # JWT 인증 헤더 형식
    'AUTH_HEADER_TYPES': ('Bearer',),    
}




# 미디어 파일 설정
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'


# 기본 캐시 설정 (로컬 메모리 캐시)
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
    }
}
