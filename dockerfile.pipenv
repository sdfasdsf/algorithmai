# Base 이미지 설정: cloudtype/python:3.10 사용
FROM cloudtype/python:3.10 AS base

# 환경 변수 설정 (바이트코드 파일 생성을 방지하고, 파이썬 출력 버퍼링을 비활성화)
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1


# Python dependencies 설치 단계
FROM base AS python-deps

# pipenv 설치 및 필요한 시스템 패키지 (gcc) 설치
RUN pip install pipenv
RUN apt-get update && apt-get install -y --no-install-recommends gcc

# Pipfile 및 Pipfile.lock 파일을 복사하여 의존성 설치
COPY ./Pipfile* ./
RUN if [ -f "./Pipfile.lock" ] || [ -f "./Pipfile" ]; then PIPENV_VENV_IN_PROJECT=1 pipenv install --deploy; fi


# Runtime 환경 설정
FROM base AS runtime

# python-deps 단계에서 생성한 가상환경을 복사하여 런타임에 사용
COPY --from=python-deps /.venv /.venv
ENV PATH="/.venv/bin:$PATH"

# pipenv를 다시 설치
RUN pip install pipenv

# 불필요한 파일들 제거 및 권한 수정
RUN chown -f python:python ./ && rm -rf .git*

# python 사용자로 전환
USER python

# 현재 디렉토리의 파일들을 컨테이너로 복사
COPY . .

# 기본 명령어 설정: pipenv를 사용하여 Django 서버 실행
CMD ["pipenv", "run", "python3", "manage.py", "runserver"]
